package com.eleng.englishback.security;

import com.eleng.englishback.repository.UserRepository;
import com.eleng.englishback.service.JwtService;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.*;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final UserRepository userRepository;

    @Override
    // Ph∆∞∆°ng th·ª©c l·ªçc x√°c th·ª±c JWT ƒë∆∞·ª£c g·ªçi cho m·ªói request
    protected void doFilterInternal(HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain) throws ServletException, IOException { // L·∫•y header x√°c th·ª±c t·ª´ request
        final String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);

        // Ki·ªÉm tra n·∫øu header kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng "Bearer {token}"
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        // Tr√≠ch xu·∫•t token JWT (b·ªè "Bearer " ·ªü ƒë·∫ßu)
        final String token = authHeader.substring(7); // L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ token
        final String username = jwtService.extractUsername(token);
        System.out.println("üîç JWT Filter: Extracted username = " + username);

        // Ki·ªÉm tra n·∫øu username h·ª£p l·ªá v√† ch∆∞a c√≥ x√°c th·ª±c trong SecurityContext
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            System.out.println("üîç JWT Filter: Processing authentication for username = " + username);
            userRepository.findByUsername(username).ifPresent(user -> {
                System.out.println("üîç JWT Filter: Found user = " + user.getUsername() + ", role = " + user.getRole());

                // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c isTokenValid t·ª´ JwtService
                if (!jwtService.isTokenValid(token)) {
                    System.out.println("‚ùå JWT Filter: Token is invalid");
                    return;
                }

                String roleName = "ROLE_" + user.getRole().name();
                System.out.println("‚úÖ JWT Filter: Setting role = " + roleName);
                SimpleGrantedAuthority authority = new SimpleGrantedAuthority(roleName);
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        user.getUsername(), null, List.of(authority));
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
                System.out.println("‚úÖ JWT Filter: Authentication set successfully for " + username);
            });
        } // Ti·∫øp t·ª•c chu·ªói l·ªçc ƒë·ªÉ x·ª≠ l√Ω c√°c b·ªô l·ªçc ti·∫øp theo
        filterChain.doFilter(request, response);
    }
}
